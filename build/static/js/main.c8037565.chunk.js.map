{"version":3,"sources":["Tile.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","isGenerated","react_default","a","createElement","value","className","readOnly","type","onChange","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initialBoard","sudoku","generate","gameLvl","state","board","toConsumableArray","isBoardSolved","index","event","target","setState","solve","join","_this2","tiles","map","tile","isNaN","src_Tile_0","key","handleChange","bind","alert","onClick","newGame","solveBoard","restartBoard","checkBoard","Component","App","renderForm","renderBoard","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8037565.chunk.js","sourcesContent":["import React from 'react';\nimport './Tile.css';\n\nconst Tile = props => {\n    if (props.isGenerated) {\n        return (\n            <input\n                value={props.value}\n                className={'Tile Tile--Locked'}\n                readOnly\n            />\n        );\n    } else {\n        return (\n            <input\n                value={props.value !== '.' ? props.value : ''}\n                className={props.isGenerated ? 'Tile Tile--Locked' : 'Tile'}\n                type=\"number\"\n                onChange={props.onChange}\n            />            \n        )\n    }\n};\n\nexport default Tile;","import React, {Component} from 'react';\nimport './Board.css';\nimport Tile from './Tile';\nimport sudoku from 'sudoku-umd';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        const initialBoard = sudoku.generate(this.props.gameLvl);\n        this.state = {\n            initialBoard: initialBoard,\n            board: [...initialBoard],\n            isBoardSolved: false,\n        }\n    }\n\n    handleChange(index, event) {\n        const board = this.state.board;\n        board[index] = event.target.value;\n        this.setState({board});\n    }\n\n    restartBoard() {\n        const board = [...this.state.initialBoard];\n        this.setState({ \n            board,\n            isBoardSolved: false\n        });\n    }\n    \n    solveBoard() {\n        const board = [...sudoku.solve(this.state.initialBoard)];\n        this.setState({\n            board\n        });\n    }\n\n    checkBoard() {\n        if (this.state.board.join('') === sudoku.solve(this.state.initialBoard)) {\n            this.setState({\n                isBoardSolved: true,\n            })\n        }\n    }\n\n    render() {\n        const tiles = this.state.board.map((tile, index) => {\n            const isGenerated = !isNaN([...this.state.initialBoard][index]);\n            return (\n                <Tile\n                key={index}\n                value={tile}\n                isGenerated={isGenerated}\n                onChange={this.handleChange.bind(this, index)}\n                />\n            )\n        });\n        const alert = this.state.isBoardSolved ? 'You win!' : '';\n        \n        return (\n            <div>\n                <div className=\"Board\">\n                    {tiles}\n                </div>\n                <div className=\"Buttons\">\n                    <button onClick={this.props.newGame}>New Game</button>\n                    <button onClick={() => this.solveBoard()}>Solve</button>\n                    <button onClick={() => this.restartBoard()}>Restart</button>\n                    <button onClick={() => this.checkBoard()}>Check</button>\n                </div>\n                <p className=\"Alert\">{alert}</p>\n            </div>\n        );\n    }\n}\n\nexport default Board;","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './Board';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameLvl: '',\n    }\n  }\n\n  newGame() {\n    this.setState({\n      gameLvl: '',\n    })\n  }\n\n  render() {\n      return (\n        this.state.gameLvl === '' ? this.renderForm() : this.renderBoard()\n      );\n  }\n\n  renderForm() {\n    return (\n      <div className=\"container\">\n        <div className=\"App\">\n          <h1>Sudoku</h1>\n          <p>New game - choose difficulty:</p>\n          <div className=\"FormButtons\">\n            <button onClick={() => this.setState({gameLvl: \"easy\"})}>Easy</button>\n            <button onClick={() => this.setState({gameLvl: \"medium\"})}>Medium</button>\n            <button onClick={() => this.setState({gameLvl: \"hard\"})}>Hard</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderBoard() {\n    return (\n      <div className=\"container\">\n        <div className=\"App\">\n          <h1>Sudoku</h1>\n          <Board\n            gameLvl={this.state.gameLvl}\n            newGame={this.newGame.bind(this)}\n          />\n        </div>     \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}