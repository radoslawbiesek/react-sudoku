{"version":3,"sources":["Tile.js","Board.js","App.js","index.js"],"names":["Tile","props","react_default","a","createElement","className","status","disabled","value","type","min","max","onChange","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","INITIAL_BOARD","sudoku","generate","gameLvl","state","initialBoard","board","toConsumableArray","solvedBoard","solve","checkMode","index","event","target","setState","_this2","currentlyCorrectBoard","forEach","element","get_candidates","row","tile","push","_this3","tiles","map","src_Tile_0","key","handleChange","bind","onClick","checkBoard","hintBoard","solveBoard","resetBoard","showMenu","Component","App","gameStatus","setStatus","toRender","renderBoard","renderForm","renderMenu","buttons","level","charAt","toLocaleUpperCase","slice","lvl","src_Board_0","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.7ad7c361.chunk.js","sourcesContent":["import React from 'react';\nimport './Tile.css';\n\nconst Tile = props => {\n    return (\n        <div className={props.status ? 'Tile Tile--' + props.status : 'Tile'}>\n            <input\n                className='Tile__Input'\n                disabled={props.status === 'Locked'}\n                value={props.value !== '.' ? props.value : ''}\n                type=\"number\"\n                min={1}\n                max={9}\n                onChange={props.onChange}\n            />\n        </div>           \n    )\n};\n\nexport default Tile;","import React, {Component} from 'react';\nimport './Board.css';\nimport Tile from './Tile';\nimport sudoku from 'sudoku-umd';\nimport './Button.css';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        const INITIAL_BOARD = sudoku.generate(this.props.gameLvl);\n        this.state = {\n            initialBoard: INITIAL_BOARD,\n            board: [...INITIAL_BOARD],\n            solvedBoard: sudoku.solve(INITIAL_BOARD),\n            checkMode: false,\n        }\n    }\n    \n    handleChange(index, event) {\n        const board = this.state.board;\n        board[index] = event.target.value;\n        this.setState({board});\n    }\n\n    checkBoard() {\n        this.setState({checkMode: !this.state.checkMode});\n    }\n\n    hintBoard() {\n        let currentlyCorrectBoard = '';\n\n        [...this.state.board].forEach((element, index) => {\n            if (element === this.state.solvedBoard[index]) {\n                currentlyCorrectBoard += element;\n            } else {\n                currentlyCorrectBoard += '.';\n            }\n        });\n\n        let board = [];\n        sudoku.get_candidates(currentlyCorrectBoard).forEach(row => {\n            row.forEach(tile => board.push(tile))\n        });\n        this.setState( {board} );\n    }\n    \n    solveBoard() {\n        const board = [...this.state.solvedBoard];\n        this.setState({\n            board, \n            checkMode: true\n        });\n    }\n\n    resetBoard() {\n        const board = [...this.state.initialBoard];\n        this.setState({ \n            board,\n            checkMode: false,\n        });\n    }\n\n    render() {\n        const tiles = this.state.board.map((tile, index) => {\n            \n            let status;\n            if (this.state.initialBoard[index] === this.state.solvedBoard[index]) {\n                status = 'Locked';\n            } else if (this.state.checkMode) {\n                switch (tile) {\n                    case this.state.solvedBoard[index]:\n                        status = 'Correct'\n                        break;\n                    default:\n                        status = 'Wrong';\n                }\n            }\n            \n            return (\n                <Tile\n                key={index}\n                value={tile}\n                status={status}\n                onChange={this.handleChange.bind(this, index)}\n                />\n            )\n        });\n        \n        return (\n            <div className=\"Board\">\n                <div className=\"Grid\">\n                    {tiles}\n                </div>\n                <div className=\"Buttons\">\n                    <button className={this.state.checkMode ? 'Button Button--Checked' : 'Button'} onClick={() => this.checkBoard()}>Check</button>\n                    <button className='Button' onClick={() => this.hintBoard()}>Hint</button>\n                    <button className='Button' onClick={() => this.solveBoard()}>Solve</button>\n                    <button className='Button' onClick={() => this.resetBoard()}>Reset</button>\n                    <button className='Button Button--Disabled' disabled>Save</button>\n                    <button className='Button' onClick={this.props.showMenu}>&crarr; Menu</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board;","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './Board';\nimport './Button.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStatus: 'menu',\n    }\n  }\n\n  setStatus(status) {\n    this.setState({gameStatus: status});\n  }\n\n  showMenu() {\n    this.setStatus('menu');\n  }\n\n  render() {\n      let toRender;\n      switch (this.state.gameStatus) {\n\n        case 'easy':\n        case 'medium':\n        case 'hard':\n        case 'very-hard':\n        case 'insane':\n        case 'inhuman':\n          toRender = this.renderBoard(this.state.gameStatus);\n          break;\n\n        case 'new':\n          toRender = this.renderForm();\n          break;\n\n        default:\n          toRender = this.renderMenu();\n      }\n\n    return (\n      <div className=\"App\">\n        {toRender}\n      </div>\n    );\n  }\n\n  renderMenu() {\n    return (\n      <div>\n        <h1>Sudoku</h1>  \n        <button className='Button' onClick={() => this.setStatus('new')}>New Game</button>\n        <button className='Button Button--Disabled' disabled>Load Game</button>\n      </div>\n    )\n  }\n\n  renderForm() {\n    const LEVELS = ['easy', 'medium', 'hard', 'very-hard', 'insane', 'inhuman'];\n    const buttons = LEVELS.map((level, index) => {\n      return (<button className='Button' key={index} onClick={() => this.setStatus(level)}>{level.charAt(0).toLocaleUpperCase() + level.slice(1)}</button>)\n    })\n\n    return (\n      <div>\n        <h2>New game:</h2>\n        <div className='ButtonGroup'>\n          {buttons}\n          <button className='Button' onClick={() => this.setStatus('menu')}>&crarr; Menu</button>\n        </div>\n      </div>\n    );\n  }\n\n  renderBoard(lvl) {\n    return (\n      <Board\n        gameLvl={lvl}\n        showMenu={this.showMenu.bind(this)}\n      />\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}