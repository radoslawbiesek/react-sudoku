{"version":3,"sources":["Tile.js","helpers.js","Board.js","LoadGame.js","NewGame.js","App.js","index.js"],"names":["Tile","props","react_default","a","createElement","className","status","disabled","value","type","min","max","onChange","KEY","cipher","str","key","arguments","length","undefined","strLen","cipheredText","i","isNaN","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","initialBoard","board","solvedBoard","sudoku","solve","checkMode","saveAlert","index","event","target","setState","_this2","currentlyCorrectBoard","toConsumableArray","forEach","element","get_candidates","row","tile","push","_this3","window","setTimeout","_this4","tiles","map","src_Tile_0","handleChange","bind","onClick","checkBoard","hintBoard","solveBoard","resetBoard","lib","text","concat","join","onCopy","showAlert","showMenu","Component","LoadGame","loaded","save","validation","assertThisInitialized","handleSubmit","e","convertSave","preventDefault","loadGame","deciphered","decipheredText","indexOf","decipher","split","src_Board_0","alert","onSubmit","id","htmlFor","toRender","renderLoadedBoard","renderForm","NewGame","gameLvl","lvl","gameLevel","buttons","level","setLvl","charAt","toLocaleUpperCase","slice","INITIAL_BOARD","generate","renderNewBoard","App","gameStatus","setStatus","renderLoadGame","renderNewGame","renderMenu","src_NewGame","src_LoadGame_0","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.1c6defae.chunk.js","sourcesContent":["import React from 'react';\nimport './Tile.css';\n\nconst Tile = props => {\n    return (\n        <div className={props.status ? 'Tile Tile--' + props.status : 'Tile'}>\n            <input\n                className='Tile__Input'\n                disabled={props.status === 'Locked'}\n                value={props.value !== '.' ? props.value : ''}\n                type=\"number\"\n                min={1}\n                max={9}\n                onChange={props.onChange}\n            />\n        </div>           \n    )\n};\n\nexport default Tile;","export const KEY = '#&$^!~?}*>';\n\nexport const cipher = (str, key = KEY) => {\n    const strLen = str.length;\n    let cipheredText = '';\n    for (let i = 0; i < strLen; i++) {\n        if (!isNaN(str[i])) {\n            cipheredText += key[str[i]];\n        } else {\n            cipheredText += str[i];\n        }\n    }\n    return cipheredText;\n}\n\nexport const decipher = (str, key = KEY) => {\n    const strLen = str.length;  \n    let decipheredText = '';\n    for (let i = 0; i< strLen; i++) {\n        if (str[i] === '.' || str[i] === '/' || str[i] === '|') {\n            decipheredText += str[i];\n        } else if (key.indexOf(str[i]) !== -1) {\n            decipheredText += key.indexOf(str[i]);\n        }\n    }\n    return decipheredText;\n}","import React, {Component} from 'react';\nimport sudoku from 'sudoku-umd';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport Tile from './Tile';\nimport { cipher } from './helpers.js';\n\nimport './Board.css';\nimport './Button.css';\n\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            initialBoard: this.props.initialBoard,\n            board: this.props.board,\n            solvedBoard: sudoku.solve(this.props.initialBoard),\n            checkMode: false,\n            saveAlert: false,\n        }\n    }\n    \n    handleChange(index, event) {\n        const board = this.state.board;\n        board[index] = event.target.value;\n        this.setState({board});\n    }\n\n    checkBoard() {\n        this.setState({checkMode: !this.state.checkMode});\n    }\n\n    hintBoard() {\n        let currentlyCorrectBoard = '';\n\n        [...this.state.board].forEach((element, index) => {\n            if (element === this.state.solvedBoard[index]) {\n                currentlyCorrectBoard += element;\n            } else {\n                currentlyCorrectBoard += '.';\n            }\n        });\n\n        let board = [];\n        sudoku.get_candidates(currentlyCorrectBoard).forEach(row => {\n            row.forEach(tile => board.push(tile))\n        });\n        this.setState( {board} );\n    }\n    \n    solveBoard() {\n        const board = [...this.state.solvedBoard];\n        this.setState({\n            board, \n            checkMode: true\n        });\n    }\n\n    resetBoard() {\n        const board = [...this.state.initialBoard];\n        this.setState({ \n            board,\n            checkMode: false,\n        });\n    }\n\n    showAlert() {\n        this.setState({ saveAlert : true });\n        window.setTimeout(\n            () => this.setState({ saveAlert : false }),\n            3000\n        );\n    }\n\n\n\n    render() {\n        const tiles = this.state.board.map((tile, index) => {\n            \n            let status;\n            if (this.state.initialBoard[index] === this.state.solvedBoard[index]) {\n                status = 'Locked';\n            } else if (this.state.checkMode) {\n                switch (tile) {\n                    case this.state.solvedBoard[index]:\n                        status = 'Correct'\n                        break;\n                    default:\n                        status = 'Wrong';\n                }\n            }\n            \n            return (\n                <Tile\n                key={index}\n                value={tile}\n                status={status}\n                onChange={this.handleChange.bind(this, index)}\n                />\n            )\n        });\n        \n        return (\n            <div className=\"Board\">\n                <div className=\"Grid\">\n                    {tiles}\n                </div>\n                <div className=\"Buttons\">\n                    <button className={this.state.checkMode ? 'Button Button--Checked' : 'Button'} onClick={() => this.checkBoard()}>Check</button>\n                    <button className='Button' onClick={() => this.hintBoard()}>Hint</button>\n                    <button className='Button' onClick={() => this.solveBoard()}>Solve</button>\n                    <button className='Button' onClick={() => this.resetBoard()}>Reset</button>\n                    <CopyToClipboard \n                        text={cipher(`${this.state.board.join('|')}/${this.state.initialBoard}`)}\n                        onCopy={() => this.showAlert()}\n                    >\n                        <button className='Button'>Save</button>\n                    </CopyToClipboard>\n                    <button className='Button' onClick={this.props.showMenu}>&crarr; Menu</button>\n                </div>\n                {this.state.saveAlert ? <p className='save-alert'>Copied to clipboard!</p> : <p className='save-alert save-alert__hidden'>_</p>}\n            </div>\n        );\n    }\n}\n\nexport default Board;","import React, { Component } from 'react';\n\nimport Board from './Board';\nimport { decipher } from './helpers.js'\n\nimport './App.css';\nimport './Button.css';\nimport './LoadGame.css';\n\nclass LoadGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      save: '',\n      validation: '',\n\n      board: [],\n      initialBoard: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({ save: e.target.value });\n    this.convertSave(e.target.value);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.board && this.state.initialBoard) this.loadGame();\n  }\n\n  convertSave(save) {\n    const deciphered = decipher(save);\n    const board = deciphered.split('/')[0].split('|');\n    const initialBoard = deciphered.split('/')[1];\n    if (board.length === 81 && initialBoard.length === 81) {\n      this.setState({ \n        board,\n        initialBoard,\n        validation: true,\n      });\n\n    } else {\n      this.setState({ \n        validation: false,\n        board: [],\n        initialBoard: ''\n      })\n    }\n  }\n\n  loadGame() {\n    this.setState({ loaded : true });\n  }\n\n  renderLoadedBoard() {\n    return (\n      <Board\n        initialBoard = {this.state.initialBoard}\n        board = {this.state.board}\n        showMenu={this.props.showMenu}\n      />\n    );\n  }\n\n  renderForm() {\n    let alert;\n    switch (this.state.validation) {\n      case false: \n        alert = <p className='form__alert form__alert--wrong'>The game save is not valid.</p>\n        break;\n      case true:\n        alert = <p className='form__alert form__alert--correct'>The game save is valid. Click 'Load' button to start.</p>\n        break;\n      default:\n        alert = <p className='form__alert'>Paste your game save above.</p>\n    }\n\n    return (\n      <div className='load'>\n        <h2>Load game:</h2>\n        <form className='form' onSubmit={this.handleSubmit}>\n          <input\n            className='form__input'\n            id=\"load-game\"\n            onChange={this.handleChange}\n          />\n          <button className='Button form__submit'>Load</button>\n          <label className='form__label' htmlFor=\"load-game\">\n            {alert}\n          </label>\n        </form>\n        <button className='Button' onClick={this.props.showMenu}>&crarr; Menu</button>\n      </div>\n    )\n  }\n\n  render() {\n    let toRender = this.state.loaded ? this.renderLoadedBoard() : this.renderForm();\n    return (\n      <div>\n        {toRender}\n      </div>\n    );\n\n  }\n\n}\n\nexport default LoadGame;","import React, { Component } from 'react';\nimport sudoku from 'sudoku-umd';\n\nimport Board from './Board';\n\nimport './App.css';\nimport './Button.css';\n\nclass NewGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameLvl: '',\n    }\n  }\n\n  setLvl(lvl) {\n      this.setState({gameLevel: lvl});\n  }\n\n  renderForm() {\n    const LEVELS = ['easy', 'medium', 'hard', 'very-hard', 'insane', 'inhuman'];\n    const buttons = LEVELS.map((level, index) => {\n      return (<button className='Button' key={index} onClick={()=>this.setLvl(level)}>{level.charAt(0).toLocaleUpperCase() + level.slice(1)}</button>)\n    });\n\n    return (\n      <div>\n        <h2>New game:</h2>\n        <div className='ButtonGroup'>\n          {buttons}\n          <button className='Button' onClick={() => this.props.showMenu()}>&crarr; Menu</button>\n        </div>\n      </div>\n    );\n  }\n\n  renderNewBoard(gameLvl) {\n    const INITIAL_BOARD = sudoku.generate(gameLvl);\n    return (\n      <Board\n        initialBoard = {INITIAL_BOARD}\n        board = {[...INITIAL_BOARD]}\n        showMenu={this.props.showMenu}\n      />\n    );\n  }\n\n  render() {\n    let toRender;\n    switch (this.state.gameLevel) {\n\n    case 'easy':\n    case 'medium':\n    case 'hard':\n    case 'very-hard':\n    case 'insane':\n    case 'inhuman':\n        toRender = this.renderNewBoard(this.state.gameLevel);\n        break;\n\n    default:\n        toRender = this.renderForm();\n    }\n\n    return (\n      <div>\n        {toRender}\n      </div>\n    );\n  }\n\n\n}\n\nexport default NewGame;","import React, { Component } from 'react';\n\nimport LoadGame from './LoadGame';\nimport NewGame from './NewGame';\n\nimport './App.css';\nimport './Button.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStatus: 'menu',\n    }\n  }\n\n  setStatus(status) {\n    this.setState({ gameStatus: status });\n  }\n\n  showMenu() {\n    this.setStatus('menu');\n  }\n\n  render() {\n      let toRender;\n\n      switch (this.state.gameStatus) {\n        case 'load':\n          toRender = this.renderLoadGame();\n          break;\n        case 'new':\n          toRender = this.renderNewGame();\n          break;\n        default:\n          toRender = this.renderMenu();\n      }\n\n    return (\n      <div className=\"App\">\n        {toRender}\n      </div>\n    );\n  }\n\n  renderMenu() {\n    return (\n      <div>\n        <h1>Sudoku</h1>  \n        <button className='Button' onClick={() => this.setStatus('new')}>New Game</button>\n        <button className='Button' onClick={() => this.setStatus('load')}>Load Game</button>\n      </div>\n    )\n  }\n\n  renderNewGame() {\n    return (\n      <NewGame\n        showMenu={this.showMenu.bind(this)}\n      />\n    );\n  }\n\n  renderLoadGame() {\n    return (\n      <LoadGame\n        showMenu={this.showMenu.bind(this)}\n      />   \n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}